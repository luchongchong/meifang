<?php

//初始化日志
//$logHandler= new CLogFileHandler("../logs/".date('Y-m-d').'.log');
//$log = Log::Init($logHandler, 15);

class NativeNotifyCallBack extends WxPayNotify
{
	/**
	 * 统一下单
	 */
	public function wxunifiedorder($order_info, $notify_url, $open_id)
	{
		//统一下单
		$input = new WxPayUnifiedOrder();
		$input->SetBody($order_info['order_name']);
		$input->SetOut_trade_no($order_info['order_no']);
		$input->SetTotal_fee($order_info['online_pay_sum']);
		$input->SetNotify_url($notify_url);
		$input->SetTrade_type('JSAPI');
		$input->SetAttach(strval($order_info['attach']));
        $input->SetOpenid($open_id);
        $input->SetDevice_info('WEB');
        $input->SetTime_start($order_info['time_start']);
        $input->SetTime_expire($order_info['time_expire']);
        
		$result = WxPayApi::unifiedOrder($input);
		$return_code = $result['return_code'];
		if($return_code === 'FAIL'){
			$return_msg = isset($result['return_msg']) ? $result['return_msg'] : '';
			return false;
		}else{
			$result_code = $result['result_code'];
			if($result_code === 'FAIL'){
				$err_code = isset($result['err_code']) ? $result['err_code'] : '';
				$err_code_des = isset($result['err_code_des']) ? $result['err_code_des'] : '';
				return false;
			}
		}
		//创建APP端预支付参数
		$data['appId'] = WxPayConfig::APPID;
        $data['timeStamp'] = $order_info['current_time'];
        $data['nonceStr'] = WxPayApi::getNonceStr();
        $data['package'] = 'prepay_id='.$result['prepay_id'];
		$data['signType'] = 'MD5';
		
		$data['sign'] = $this->myMakeSign($data); 
		
		return $data;
	}
	
	/**
	 * 生成签名
	 *  @return 签名
	 */
	private function myMakeSign($params){
		//签名步骤一：按字典序排序数组参数
		ksort($params);
		$string = $this->myToUrlParams($params);
		//签名步骤二：在string后加入KEY
		$string = $string . "&key=".WxPayConfig::KEY;
		//签名步骤三：MD5加密
		$string = md5($string);
		//签名步骤四：所有字符转为大写
		$result = strtoupper($string);
		return $result;
	}
	
	/**
	 * 将参数拼接为url: key=value&key=value
	 * @param	$params
	 * @return	string
	 */
	private function myToUrlParams($params){
		$string = '';
		if( !empty($params) ){
			$array = array();
			foreach( $params as $key => $value ){
				$array[] = $key.'='.$value;
			}
			$string = implode("&",$array);
		}
		return $string;
	}
	
	/**
	 * 微信支付回调
	 */
	public function NotifyProcess($data, &$msg)
	{
	    $this->log(ROOT_PATH.'/data/wx_new_log.txt',json_encode($data)."\r\n");
		//echo "处理回调";
		if ($data===false){
			// return false,微信会重新回调该方法，总共回调8次。通知频率为15/15/30/180/1800/1800/1800/1800/3600，单位：秒
			return false;
		}else{
			if($data['return_code'] === 'SUCCESS' ){
			        $log_id=$data['attach'];
                	        order_paid($log_id, 2);
							stock_insert($log_id);
                }
			return true;
		}
		
	}
	public function log($file,$txt)
	{
	    $fp =  fopen($file,'ab+');
	    fwrite($fp,'-----------'.local_date('Y-m-d H:i:s').'-----------------');
	    fwrite($fp,$txt);
	    fwrite($fp,"\r\n\r\n\r\n");
	    fclose($fp);
	}
	
}


